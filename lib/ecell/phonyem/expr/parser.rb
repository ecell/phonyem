# Autogenerated from a Treetop grammar. Edits may be lost.


require 'ecell/phonyem/expr/parser_utils'

module ECell
  module Phonyem
    module Expr
      module ExpressionProcessScript
        include Treetop::Runtime

        def root
          @root ||= :expression
        end

        module Expression0
          def op
            elements[0]
          end

          def ws1
            elements[1]
          end

          def term
            elements[2]
          end

          def ws2
            elements[3]
          end
        end

        module Expression1
          def op
            elements[0]
          end

          def ws1
            elements[1]
          end

          def term
            elements[2]
          end

          def ws2
            elements[3]
          end
        end

        module Expression2
          def ws1
            elements[0]
          end

          def head
            elements[1]
          end

          def ws2
            elements[2]
          end

          def tail
            elements[3]
          end
        end

        module Expression3
          def ast_node
            left_elem = Utils.find_ast_node_in_cst(head)
            tail.elements.each do |group|
              left_elem = [
                group.op.text_value.to_sym,
                left_elem,
                Utils.find_ast_node_in_cst(group.term)
              ]
            end
            left_elem
          end
        end

        def _nt_expression
          start_index = index
          if node_cache[:expression].has_key?(index)
            cached = node_cache[:expression][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_ws
          s0 << r1
          if r1
            r2 = _nt_term
            s0 << r2
            if r2
              r3 = _nt_ws
              s0 << r3
              if r3
                s4, i4 = [], index
                loop do
                  i5 = index
                  i6, s6 = index, []
                  if has_terminal?('+', false, index)
                    r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('+')
                    r7 = nil
                  end
                  s6 << r7
                  if r7
                    r8 = _nt_ws
                    s6 << r8
                    if r8
                      r9 = _nt_term
                      s6 << r9
                      if r9
                        r10 = _nt_ws
                        s6 << r10
                      end
                    end
                  end
                  if s6.last
                    r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                    r6.extend(Expression0)
                  else
                    @index = i6
                    r6 = nil
                  end
                  if r6
                    r5 = r6
                  else
                    i11, s11 = index, []
                    if has_terminal?('-', false, index)
                      r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('-')
                      r12 = nil
                    end
                    s11 << r12
                    if r12
                      r13 = _nt_ws
                      s11 << r13
                      if r13
                        r14 = _nt_term
                        s11 << r14
                        if r14
                          r15 = _nt_ws
                          s11 << r15
                        end
                      end
                    end
                    if s11.last
                      r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                      r11.extend(Expression1)
                    else
                      @index = i11
                      r11 = nil
                    end
                    if r11
                      r5 = r11
                    else
                      @index = i5
                      r5 = nil
                    end
                  end
                  if r5
                    s4 << r5
                  else
                    break
                  end
                end
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                s0 << r4
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Expression2)
            r0.extend(Expression3)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:expression][start_index] = r0

          r0
        end

        module Term0
          def op
            elements[0]
          end

          def ws1
            elements[1]
          end

          def power
            elements[2]
          end

          def ws2
            elements[3]
          end
        end

        module Term1
          def op
            elements[0]
          end

          def power
            elements[1]
          end

          def ws
            elements[2]
          end
        end

        module Term2
          def head
            elements[0]
          end

          def ws
            elements[1]
          end

          def tail
            elements[2]
          end
        end

        module Term3
          def ast_node
            left_elem = Utils.find_ast_node_in_cst(head)
            tail.elements.each do |group|
              left_elem = [
                group.op.text_value.to_sym,
                left_elem,
                Utils.find_ast_node_in_cst(group.power)
              ]
            end
            left_elem
          end
        end

        def _nt_term
          start_index = index
          if node_cache[:term].has_key?(index)
            cached = node_cache[:term][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_power
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              s3, i3 = [], index
              loop do
                i4 = index
                i5, s5 = index, []
                if has_terminal?('*', false, index)
                  r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('*')
                  r6 = nil
                end
                s5 << r6
                if r6
                  r7 = _nt_ws
                  s5 << r7
                  if r7
                    r8 = _nt_power
                    s5 << r8
                    if r8
                      r9 = _nt_ws
                      s5 << r9
                    end
                  end
                end
                if s5.last
                  r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
                  r5.extend(Term0)
                else
                  @index = i5
                  r5 = nil
                end
                if r5
                  r4 = r5
                else
                  i10, s10 = index, []
                  if has_terminal?('/', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('/')
                    r11 = nil
                  end
                  s10 << r11
                  if r11
                    r12 = _nt_power
                    s10 << r12
                    if r12
                      r13 = _nt_ws
                      s10 << r13
                    end
                  end
                  if s10.last
                    r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                    r10.extend(Term1)
                  else
                    @index = i10
                    r10 = nil
                  end
                  if r10
                    r4 = r10
                  else
                    @index = i4
                    r4 = nil
                  end
                end
                if r4
                  s3 << r4
                else
                  break
                end
              end
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              s0 << r3
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Term2)
            r0.extend(Term3)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:term][start_index] = r0

          r0
        end

        module Power0
          def ws1
            elements[1]
          end

          def factor
            elements[2]
          end

          def ws2
            elements[3]
          end
        end

        module Power1
          def head
            elements[0]
          end

          def ws
            elements[1]
          end

          def tail
            elements[2]
          end
        end

        module Power2
          def ast_node
            left_elem = Utils.find_ast_node_in_cst(head)
            tail.elements.each do |group|
              left_elem = [
                :^,
                left_elem,
                Utils.find_ast_node_in_cst(group.factor)
              ]
            end
            left_elem
          end
        end

        def _nt_power
          start_index = index
          if node_cache[:power].has_key?(index)
            cached = node_cache[:power][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_factor
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              s3, i3 = [], index
              loop do
                i4, s4 = index, []
                if has_terminal?('^', false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('^')
                  r5 = nil
                end
                s4 << r5
                if r5
                  r6 = _nt_ws
                  s4 << r6
                  if r6
                    r7 = _nt_factor
                    s4 << r7
                    if r7
                      r8 = _nt_ws
                      s4 << r8
                    end
                  end
                end
                if s4.last
                  r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                  r4.extend(Power0)
                else
                  @index = i4
                  r4 = nil
                end
                if r4
                  s3 << r4
                else
                  break
                end
              end
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              s0 << r3
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Power1)
            r0.extend(Power2)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:power][start_index] = r0

          r0
        end

        def _nt_factor
          start_index = index
          if node_cache[:factor].has_key?(index)
            cached = node_cache[:factor][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0 = index
          r1 = _nt_call_func
          if r1
            r0 = r1
          else
            r2 = _nt_system_func
            if r2
              r0 = r2
            else
              r3 = _nt_variable
              if r3
                r0 = r3
              else
                r4 = _nt_constant
                if r4
                  r0 = r4
                else
                  r5 = _nt_group
                  if r5
                    r0 = r5
                  else
                    r6 = _nt_identifier
                    if r6
                      r0 = r6
                    else
                      r7 = _nt_negative
                      if r7
                        r0 = r7
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end

          node_cache[:factor][start_index] = r0

          r0
        end

        def _nt_builtin_func_name
          start_index = index
          if node_cache[:builtin_func_name].has_key?(index)
            cached = node_cache[:builtin_func_name][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0 = index
          if has_terminal?("eq", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("eq")
            r1 = nil
          end
          if r1
            r0 = r1
          else
            if has_terminal?("neq", false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("neq")
              r2 = nil
            end
            if r2
              r0 = r2
            else
              if has_terminal?("gt", false, index)
                r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("gt")
                r3 = nil
              end
              if r3
                r0 = r3
              else
                if has_terminal?("lt", false, index)
                  r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("lt")
                  r4 = nil
                end
                if r4
                  r0 = r4
                else
                  if has_terminal?("geq", false, index)
                    r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure("geq")
                    r5 = nil
                  end
                  if r5
                    r0 = r5
                  else
                    if has_terminal?("leq", false, index)
                      r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure("leq")
                      r6 = nil
                    end
                    if r6
                      r0 = r6
                    else
                      if has_terminal?("and", false, index)
                        r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure("and")
                        r7 = nil
                      end
                      if r7
                        r0 = r7
                      else
                        if has_terminal?("or", false, index)
                          r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure("or")
                          r8 = nil
                        end
                        if r8
                          r0 = r8
                        else
                          if has_terminal?("xor", false, index)
                            r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            @index += 3
                          else
                            terminal_parse_failure("xor")
                            r9 = nil
                          end
                          if r9
                            r0 = r9
                          else
                            if has_terminal?("not", false, index)
                              r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                              @index += 3
                            else
                              terminal_parse_failure("not")
                              r10 = nil
                            end
                            if r10
                              r0 = r10
                            else
                              if has_terminal?("abs", false, index)
                                r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                @index += 3
                              else
                                terminal_parse_failure("abs")
                                r11 = nil
                              end
                              if r11
                                r0 = r11
                              else
                                if has_terminal?("sqrt", false, index)
                                  r12 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                  @index += 4
                                else
                                  terminal_parse_failure("sqrt")
                                  r12 = nil
                                end
                                if r12
                                  r0 = r12
                                else
                                  if has_terminal?("pow", false, index)
                                    r13 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                    @index += 3
                                  else
                                    terminal_parse_failure("pow")
                                    r13 = nil
                                  end
                                  if r13
                                    r0 = r13
                                  else
                                    if has_terminal?("exp", false, index)
                                      r14 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                      @index += 3
                                    else
                                      terminal_parse_failure("exp")
                                      r14 = nil
                                    end
                                    if r14
                                      r0 = r14
                                    else
                                      if has_terminal?("log10", false, index)
                                        r15 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                        @index += 5
                                      else
                                        terminal_parse_failure("log10")
                                        r15 = nil
                                      end
                                      if r15
                                        r0 = r15
                                      else
                                        if has_terminal?("log", false, index)
                                          r16 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                          @index += 3
                                        else
                                          terminal_parse_failure("log")
                                          r16 = nil
                                        end
                                        if r16
                                          r0 = r16
                                        else
                                          if has_terminal?("floor", false, index)
                                            r17 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                            @index += 5
                                          else
                                            terminal_parse_failure("floor")
                                            r17 = nil
                                          end
                                          if r17
                                            r0 = r17
                                          else
                                            if has_terminal?("ceil", false, index)
                                              r18 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                              @index += 4
                                            else
                                              terminal_parse_failure("ceil")
                                              r18 = nil
                                            end
                                            if r18
                                              r0 = r18
                                            else
                                              if has_terminal?("sin", false, index)
                                                r19 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                @index += 3
                                              else
                                                terminal_parse_failure("sin")
                                                r19 = nil
                                              end
                                              if r19
                                                r0 = r19
                                              else
                                                if has_terminal?("cos", false, index)
                                                  r20 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                  @index += 3
                                                else
                                                  terminal_parse_failure("cos")
                                                  r20 = nil
                                                end
                                                if r20
                                                  r0 = r20
                                                else
                                                  if has_terminal?("tan", false, index)
                                                    r21 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                    @index += 3
                                                  else
                                                    terminal_parse_failure("tan")
                                                    r21 = nil
                                                  end
                                                  if r21
                                                    r0 = r21
                                                  else
                                                    if has_terminal?("sinh", false, index)
                                                      r22 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                      @index += 4
                                                    else
                                                      terminal_parse_failure("sinh")
                                                      r22 = nil
                                                    end
                                                    if r22
                                                      r0 = r22
                                                    else
                                                      if has_terminal?("cosh", false, index)
                                                        r23 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                        @index += 4
                                                      else
                                                        terminal_parse_failure("cosh")
                                                        r23 = nil
                                                      end
                                                      if r23
                                                        r0 = r23
                                                      else
                                                        if has_terminal?("tanh", false, index)
                                                          r24 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                          @index += 4
                                                        else
                                                          terminal_parse_failure("tanh")
                                                          r24 = nil
                                                        end
                                                        if r24
                                                          r0 = r24
                                                        else
                                                          if has_terminal?("asin", false, index)
                                                            r25 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                            @index += 4
                                                          else
                                                            terminal_parse_failure("asin")
                                                            r25 = nil
                                                          end
                                                          if r25
                                                            r0 = r25
                                                          else
                                                            if has_terminal?("acos", false, index)
                                                              r26 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                              @index += 4
                                                            else
                                                              terminal_parse_failure("acos")
                                                              r26 = nil
                                                            end
                                                            if r26
                                                              r0 = r26
                                                            else
                                                              if has_terminal?("atan", false, index)
                                                                r27 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                @index += 4
                                                              else
                                                                terminal_parse_failure("atan")
                                                                r27 = nil
                                                              end
                                                              if r27
                                                                r0 = r27
                                                              else
                                                                if has_terminal?("fact", false, index)
                                                                  r28 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                  @index += 4
                                                                else
                                                                  terminal_parse_failure("fact")
                                                                  r28 = nil
                                                                end
                                                                if r28
                                                                  r0 = r28
                                                                else
                                                                  if has_terminal?("asinh", false, index)
                                                                    r29 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                    @index += 5
                                                                  else
                                                                    terminal_parse_failure("asinh")
                                                                    r29 = nil
                                                                  end
                                                                  if r29
                                                                    r0 = r29
                                                                  else
                                                                    if has_terminal?("acosh", false, index)
                                                                      r30 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                      @index += 5
                                                                    else
                                                                      terminal_parse_failure("acosh")
                                                                      r30 = nil
                                                                    end
                                                                    if r30
                                                                      r0 = r30
                                                                    else
                                                                      if has_terminal?("atanh", false, index)
                                                                        r31 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                        @index += 5
                                                                      else
                                                                        terminal_parse_failure("atanh")
                                                                        r31 = nil
                                                                      end
                                                                      if r31
                                                                        r0 = r31
                                                                      else
                                                                        if has_terminal?("asech", false, index)
                                                                          r32 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                          @index += 5
                                                                        else
                                                                          terminal_parse_failure("asech")
                                                                          r32 = nil
                                                                        end
                                                                        if r32
                                                                          r0 = r32
                                                                        else
                                                                          if has_terminal?("acsch", false, index)
                                                                            r33 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                            @index += 5
                                                                          else
                                                                            terminal_parse_failure("acsch")
                                                                            r33 = nil
                                                                          end
                                                                          if r33
                                                                            r0 = r33
                                                                          else
                                                                            if has_terminal?("acoth", false, index)
                                                                              r34 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                              @index += 5
                                                                            else
                                                                              terminal_parse_failure("acoth")
                                                                              r34 = nil
                                                                            end
                                                                            if r34
                                                                              r0 = r34
                                                                            else
                                                                              if has_terminal?("sech", false, index)
                                                                                r35 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                @index += 4
                                                                              else
                                                                                terminal_parse_failure("sech")
                                                                                r35 = nil
                                                                              end
                                                                              if r35
                                                                                r0 = r35
                                                                              else
                                                                                if has_terminal?("csch", false, index)
                                                                                  r36 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                  @index += 4
                                                                                else
                                                                                  terminal_parse_failure("csch")
                                                                                  r36 = nil
                                                                                end
                                                                                if r36
                                                                                  r0 = r36
                                                                                else
                                                                                  if has_terminal?("coth", false, index)
                                                                                    r37 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                    @index += 4
                                                                                  else
                                                                                    terminal_parse_failure("coth")
                                                                                    r37 = nil
                                                                                  end
                                                                                  if r37
                                                                                    r0 = r37
                                                                                  else
                                                                                    if has_terminal?("asec", false, index)
                                                                                      r38 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                      @index += 4
                                                                                    else
                                                                                      terminal_parse_failure("asec")
                                                                                      r38 = nil
                                                                                    end
                                                                                    if r38
                                                                                      r0 = r38
                                                                                    else
                                                                                      if has_terminal?("acsc", false, index)
                                                                                        r39 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                        @index += 4
                                                                                      else
                                                                                        terminal_parse_failure("acsc")
                                                                                        r39 = nil
                                                                                      end
                                                                                      if r39
                                                                                        r0 = r39
                                                                                      else
                                                                                        if has_terminal?("acot", false, index)
                                                                                          r40 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                          @index += 4
                                                                                        else
                                                                                          terminal_parse_failure("acot")
                                                                                          r40 = nil
                                                                                        end
                                                                                        if r40
                                                                                          r0 = r40
                                                                                        else
                                                                                          if has_terminal?("sec", false, index)
                                                                                            r41 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                                            @index += 3
                                                                                          else
                                                                                            terminal_parse_failure("sec")
                                                                                            r41 = nil
                                                                                          end
                                                                                          if r41
                                                                                            r0 = r41
                                                                                          else
                                                                                            if has_terminal?("csc", false, index)
                                                                                              r42 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                                              @index += 3
                                                                                            else
                                                                                              terminal_parse_failure("csc")
                                                                                              r42 = nil
                                                                                            end
                                                                                            if r42
                                                                                              r0 = r42
                                                                                            else
                                                                                              if has_terminal?("cot", false, index)
                                                                                                r43 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                                                @index += 3
                                                                                              else
                                                                                                terminal_parse_failure("cot")
                                                                                                r43 = nil
                                                                                              end
                                                                                              if r43
                                                                                                r0 = r43
                                                                                              else
                                                                                                @index = i0
                                                                                                r0 = nil
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end

          node_cache[:builtin_func_name][start_index] = r0

          r0
        end

        module CallFunc0
          def ws1
            elements[1]
          end

          def expression
            elements[2]
          end

          def ws2
            elements[3]
          end
        end

        module CallFunc1
          def func_name
            elements[0]
          end

          def ws1
            elements[2]
          end

          def head
            elements[3]
          end

          def ws2
            elements[4]
          end

          def tail
            elements[5]
          end

        end

        module CallFunc2
          def ast_node
            retval = [:call_func, func_name.text_value]
            retval << Utils.find_ast_node_in_cst(head)
            tail.elements.each do |group|
              retval << Utils.find_ast_node_in_cst(group.expression)
            end
            retval
          end
        end

        def _nt_call_func
          start_index = index
          if node_cache[:call_func].has_key?(index)
            cached = node_cache[:call_func][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_builtin_func_name
          s0 << r1
          if r1
            if has_terminal?('(', false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r2 = nil
            end
            s0 << r2
            if r2
              r3 = _nt_ws
              s0 << r3
              if r3
                r4 = _nt_expression
                s0 << r4
                if r4
                  r5 = _nt_ws
                  s0 << r5
                  if r5
                    s6, i6 = [], index
                    loop do
                      i7, s7 = index, []
                      if has_terminal?(',', false, index)
                        r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(',')
                        r8 = nil
                      end
                      s7 << r8
                      if r8
                        r9 = _nt_ws
                        s7 << r9
                        if r9
                          r10 = _nt_expression
                          s7 << r10
                          if r10
                            r11 = _nt_ws
                            s7 << r11
                          end
                        end
                      end
                      if s7.last
                        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                        r7.extend(CallFunc0)
                      else
                        @index = i7
                        r7 = nil
                      end
                      if r7
                        s6 << r7
                      else
                        break
                      end
                    end
                    r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                    s0 << r6
                    if r6
                      if has_terminal?(')', false, index)
                        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(')')
                        r12 = nil
                      end
                      s0 << r12
                    end
                  end
                end
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(CallFunc1)
            r0.extend(CallFunc2)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:call_func][start_index] = r0

          r0
        end

        module SystemProperty0
          def ws1
            elements[1]
          end

          def name
            elements[2]
          end

          def ws2
            elements[3]
          end

        end

        module SystemProperty1
          def ast_node
            [:system_property, :name]
          end
        end

        def _nt_system_property
          start_index = index
          if node_cache[:system_property].has_key?(index)
            cached = node_cache[:system_property][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          if has_terminal?('.', false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r1 = nil
          end
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              s3, i3 = [], index
              loop do
                if has_terminal?('\G[A-Za-z_]', true, index)
                  r4 = true
                  @index += 1
                else
                  r4 = nil
                end
                if r4
                  s3 << r4
                else
                  break
                end
              end
              if s3.empty?
                @index = i3
                r3 = nil
              else
                r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              end
              s0 << r3
              if r3
                r5 = _nt_ws
                s0 << r5
                if r5
                  if has_terminal?('(', false, index)
                    r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('(')
                    r6 = nil
                  end
                  s0 << r6
                  if r6
                    if has_terminal?(')', false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r7 = nil
                    end
                    s0 << r7
                  end
                end
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(SystemProperty0)
            r0.extend(SystemProperty1)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:system_property][start_index] = r0

          r0
        end

        module SystemFunc0
          def object
            elements[0]
          end

          def ws1
            elements[1]
          end

          def system_property
            elements[2]
          end

          def ws2
            elements[3]
          end

          def ws3
            elements[5]
          end

          def property
            elements[6]
          end
        end

        module SystemFunc1
          def ast_node
            [:system_func, Utils.find_ast_node_in_cst(object), Utils.find_ast_node_in_cst(system_property), Utils.find_ast_node_in_cst(property)]
          end
        end

        def _nt_system_func
          start_index = index
          if node_cache[:system_func].has_key?(index)
            cached = node_cache[:system_func][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_identifier
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              r3 = _nt_system_property
              s0 << r3
              if r3
                r4 = _nt_ws
                s0 << r4
                if r4
                  if has_terminal?('.', false, index)
                    r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('.')
                    r5 = nil
                  end
                  s0 << r5
                  if r5
                    r6 = _nt_ws
                    s0 << r6
                    if r6
                      r7 = _nt_identifier
                      s0 << r7
                    end
                  end
                end
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(SystemFunc0)
            r0.extend(SystemFunc1)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:system_func][start_index] = r0

          r0
        end

        module Variable0
          def identifier1
            elements[0]
          end

          def ws1
            elements[1]
          end

          def ws2
            elements[3]
          end

          def identifier2
            elements[4]
          end
        end

        module Variable1
          def ast_node
            [:variable, Utils.find_ast_node_in_cst(elements[0]), Utils.find_ast_node_in_cst(elements[4])]
          end
        end

        def _nt_variable
          start_index = index
          if node_cache[:variable].has_key?(index)
            cached = node_cache[:variable][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          r1 = _nt_identifier
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              if has_terminal?('.', false, index)
                r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r3 = nil
              end
              s0 << r3
              if r3
                r4 = _nt_ws
                s0 << r4
                if r4
                  r5 = _nt_identifier
                  s0 << r5
                end
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Variable0)
            r0.extend(Variable1)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:variable][start_index] = r0

          r0
        end

        module Constant0
          def ast_node
            text_value.to_f
          end
        end

        module Constant1
          def ast_node
            text_value.to_f
          end
        end

        module Constant2
          def ast_node
            text_value.to_i
          end
        end

        def _nt_constant
          start_index = index
          if node_cache[:constant].has_key?(index)
            cached = node_cache[:constant][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0 = index
          r1 = _nt_exponent
          r1.extend(Constant0)
          if r1
            r0 = r1
          else
            r2 = _nt_floating
            r2.extend(Constant1)
            if r2
              r0 = r2
            else
              r3 = _nt_integer
              r3.extend(Constant2)
              if r3
                r0 = r3
              else
                @index = i0
                r0 = nil
              end
            end
          end

          node_cache[:constant][start_index] = r0

          r0
        end

        module Group0
          def ws1
            elements[1]
          end

          def expression
            elements[2]
          end

          def ws2
            elements[3]
          end

        end

        module Group1
          def ast_node
            return expression.ast_node
          end
        end

        def _nt_group
          start_index = index
          if node_cache[:group].has_key?(index)
            cached = node_cache[:group][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          if has_terminal?('(', false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r1 = nil
          end
          s0 << r1
          if r1
            r2 = _nt_ws
            s0 << r2
            if r2
              r3 = _nt_expression
              s0 << r3
              if r3
                r4 = _nt_ws
                s0 << r4
                if r4
                  if has_terminal?(')', false, index)
                    r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r5 = nil
                  end
                  s0 << r5
                end
              end
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Group0)
            r0.extend(Group1)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:group][start_index] = r0

          r0
        end

        def _nt_integer
          start_index = index
          if node_cache[:integer].has_key?(index)
            cached = node_cache[:integer][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          s0, i0 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r1 = true
              @index += 1
            else
              r1 = nil
            end
            if r1
              s0 << r1
            else
              break
            end
          end
          if s0.empty?
            @index = i0
            r0 = nil
          else
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          end

          node_cache[:integer][start_index] = r0

          r0
        end

        module Floating0
        end

        def _nt_floating
          start_index = index
          if node_cache[:floating].has_key?(index)
            cached = node_cache[:floating][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          s1, i1 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r2 = true
              @index += 1
            else
              r2 = nil
            end
            if r2
              s1 << r2
            else
              break
            end
          end
          if s1.empty?
            @index = i1
            r1 = nil
          else
            r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          end
          s0 << r1
          if r1
            if has_terminal?('.', false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r3 = nil
            end
            s0 << r3
            if r3
              s4, i4 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r5 = true
                  @index += 1
                else
                  r5 = nil
                end
                if r5
                  s4 << r5
                else
                  break
                end
              end
              if s4.empty?
                @index = i4
                r4 = nil
              else
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
              end
              s0 << r4
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Floating0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:floating][start_index] = r0

          r0
        end

        module Exponent0
          def integer
            elements[1]
          end
        end

        module Exponent1
          def integer
            elements[1]
          end
        end

        module Exponent2
        end

        def _nt_exponent
          start_index = index
          if node_cache[:exponent].has_key?(index)
            cached = node_cache[:exponent][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          i1 = index
          r2 = _nt_floating
          if r2
            r1 = r2
          else
            r3 = _nt_integer
            if r3
              r1 = r3
            else
              @index = i1
              r1 = nil
            end
          end
          s0 << r1
          if r1
            i4 = index
            if has_terminal?('e', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('e')
              r5 = nil
            end
            if r5
              r4 = r5
            else
              if has_terminal?('E', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('E')
                r6 = nil
              end
              if r6
                r4 = r6
              else
                @index = i4
                r4 = nil
              end
            end
            s0 << r4
            if r4
              i7 = index
              i8, s8 = index, []
              if has_terminal?('-', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('-')
                r9 = nil
              end
              s8 << r9
              if r9
                r10 = _nt_integer
                s8 << r10
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(Exponent0)
              else
                @index = i8
                r8 = nil
              end
              if r8
                r7 = r8
              else
                i11, s11 = index, []
                if has_terminal?('+', false, index)
                  r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('+')
                  r12 = nil
                end
                s11 << r12
                if r12
                  r13 = _nt_integer
                  s11 << r13
                end
                if s11.last
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  r11.extend(Exponent1)
                else
                  @index = i11
                  r11 = nil
                end
                if r11
                  r7 = r11
                else
                  r14 = _nt_integer
                  if r14
                    r7 = r14
                  else
                    @index = i7
                    r7 = nil
                  end
                end
              end
              s0 << r7
            end
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Exponent2)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:exponent][start_index] = r0

          r0
        end

        module Identifier0
        end

        module Identifier1
          def ast_node
            [:identifier, text_value]
          end
        end

        def _nt_identifier
          start_index = index
          if node_cache[:identifier].has_key?(index)
            cached = node_cache[:identifier][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          if has_terminal?('\G[A-Za-z]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          s0 << r1
          if r1
            s2, i2 = [], index
            loop do
              if has_terminal?('\G[0-9A-Za-z_]', true, index)
                r3 = true
                @index += 1
              else
                r3 = nil
              end
              if r3
                s2 << r3
              else
                break
              end
            end
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Identifier0)
            r0.extend(Identifier1)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:identifier][start_index] = r0

          r0
        end

        module Negative0
          def factor
            elements[1]
          end
        end

        module Negative1
          def ast_node
            [:negate, elements[1].ast_node]
          end
        end

        def _nt_negative
          start_index = index
          if node_cache[:negative].has_key?(index)
            cached = node_cache[:negative][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          i0, s0 = index, []
          if has_terminal?('-', false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r1 = nil
          end
          s0 << r1
          if r1
            r2 = _nt_factor
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(Negative0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:negative][start_index] = r0

          r0
        end

        def _nt_ws
          start_index = index
          if node_cache[:ws].has_key?(index)
            cached = node_cache[:ws][index]
            if cached
              cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
              @index = cached.interval.end
            end
            return cached
          end

          s0, i0 = [], index
          loop do
            if has_terminal?('\G[ \\t\\r\\n]', true, index)
              r1 = true
              @index += 1
            else
              r1 = nil
            end
            if r1
              s0 << r1
            else
              break
            end
          end
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

          node_cache[:ws][start_index] = r0

          r0
        end

      end

      class ExpressionProcessScriptParser < Treetop::Runtime::CompiledParser
        include ExpressionProcessScript
      end

    end
  end
end
